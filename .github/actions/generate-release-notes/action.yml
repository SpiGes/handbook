# .github/actions/generate-release-notes/action.yml
name: Generate Release Notes and Changelog
inputs:
  new_version:
    required: true
    type: string
  gh_token:
    required: true
    type: string

permissions:
  contents: write

runs:
  using: 'composite'
  steps:
    - name: Generate Release Notes and Changelog
      id: generate_notes
      env:
        GH_TOKEN: ${{ inputs.gh_token }}
      run: |
        # Retrieve the ID of the "Next" milestone
        milestone_id=$(gh api repos/${{ github.repository }}/milestones --jq '.[] | select(.title=="Next") | .number')

        if [ -z "$milestone_id" ]; then
          echo "❌ No 'Next' milestone found."
          exit 1
        fi

        RELEASE_DATE=$(date -u +"%Y.%m.%d")
        VERSION=${{ inputs.new_version }}

        # Output files
        RELEASE_NOTES_FILE="./RELEASE_NOTES.md"
        CHANGELOG_FILE="./CHANGELOG.md"
        TEMP_CHANGELOG="./temp_changelog.md"
        TEMP_FILE="./temp_changelog_reorder.md"

        # Static changelog header
        CHANGELOG_HEADER="# Changelog - Documentation

        All notable changes to the SpiGes documentation will be documented in this file.
        "

        # Generate `release_notes.md`
        echo "# Release Notes - SpiGes Documentation Version [$VERSION]" > "$RELEASE_NOTES_FILE"
        echo "" >> "$RELEASE_NOTES_FILE"
        echo "## Release Date: $RELEASE_DATE" >> "$RELEASE_NOTES_FILE"
        echo "" >> "$RELEASE_NOTES_FILE"

        # Generate `temp_changelog.md` for the new version
        echo "## [$VERSION] - $RELEASE_DATE" > "$TEMP_CHANGELOG"
        echo "" >> "$TEMP_CHANGELOG"

        # Initialize sections
        sections=("New|Documentation" "New|Others" "Updated|Documentation" "Updated|Others" "Fixed|Documentation" "Fixed|Others" "Removed|Documentation" "Removed|Others")
        declare -A issues_map
        declare -A has_issues

        for section in "${sections[@]}"; do
          issues_map[$section]=""
          has_issues[$section]=0
        done

        # Retrieve issues associated with the "Next" milestone
        issues=$(gh issue list --milestone "$milestone_id" --state closed --json number,title,labels)

        # If no issues exist, add a default entry
        if [[ -z "$issues" || "$issues" == "[]" || "$issues" == "null" ]]; then
          echo "⚠️ No issues found in milestone 'Next'. Adding default entry."
          issues_map["New|Documentation"]+="- New content added"$'\n'
          has_issues["New|Documentation"]=1
        else
          # Sort issues into the appropriate categories
          while IFS= read -r issue; do
            number=$(echo "$issue" | jq -r '.number')
            title=$(echo "$issue" | jq -r '.title')
            labels=$(echo "$issue" | jq -r '[.labels[].name] | join(",")')

            entry="- [#$number](https://github.com/SpiGes/handbook/issues/$number) - $title"

            if [[ $labels == *"documentation"* && $labels == *"new"* ]]; then
              issues_map["New|Documentation"]+="$entry"$'\n'
              has_issues["New|Documentation"]=1
            elif [[ $labels == *"documentation"* && $labels == *"update"* ]]; then
              issues_map["Updated|Documentation"]+="$entry"$'\n'
              has_issues["Updated|Documentation"]=1
            elif [[ $labels == *"documentation"* && $labels != *"new"* && $labels != *"update"* ]]; then
              # Add issues with only "documentation" label (without "new" or "update")
              issues_map["New|Documentation"]+="$entry"$'\n'
              has_issues["New|Documentation"]=1
            elif [[ $labels == *"new"* ]]; then
              issues_map["New|Others"]+="$entry"$'\n'
              has_issues["New|Others"]=1
            elif [[ $labels == *"update"* ]]; then
              issues_map["Updated|Others"]+="$entry"$'\n'
              has_issues["Updated|Others"]=1
            elif [[ $labels == *"bug"* ]]; then
              issues_map["Fixed|Others"]+="$entry"$'\n'
              has_issues["Fixed|Others"]=1
            fi
          done <<< "$(echo "$issues" | jq -c '.[]')"
        fi

        # Generate sections for `release_notes.md` and `temp_changelog.md`
        for section in "New" "Updated" "Fixed" "Removed"; do
          section_has_content=false
          section_content=""

          for subcategory in "Documentation" "Others"; do
            key="$section|$subcategory"
            if [ "${has_issues[$key]:-0}" -eq 1 ]; then
              section_has_content=true
              section_content+="\n#### $subcategory\n\n${issues_map[$key]}"
            fi
          done

          if [ "$section_has_content" = true ]; then
            echo "### $section" >> "$RELEASE_NOTES_FILE"
            echo "### $section" >> "$TEMP_CHANGELOG"
            echo -e "$section_content" >> "$RELEASE_NOTES_FILE"
            echo -e "$section_content" >> "$TEMP_CHANGELOG"
          fi
        done

        # Add footer to `release_notes.md`
        echo "## Contributors" >> "$RELEASE_NOTES_FILE"
        echo "" >> "$RELEASE_NOTES_FILE"
        echo "- **SpiGes documentation team**." >> "$RELEASE_NOTES_FILE"
        echo "" >> "$RELEASE_NOTES_FILE"
        echo "**Thank you for continuing to use SpiGes documentation. We hope these updates make your experience even better.**" >> "$RELEASE_NOTES_FILE"

        # Extract previous changelog content (keeping only past entries)
        if [ -f "$CHANGELOG_FILE" ]; then
          awk '/^## \[[0-9]+\.[0-9]+(\.[0-9]+)?\] - [0-9]{4}\.[0-9]{2}\.[0-9]{2}/,EOF' "$CHANGELOG_FILE" > "$TEMP_FILE"
        else
          touch "$TEMP_FILE"
        fi

        # Rewrite `CHANGELOG.md` with new version on top
        echo "$CHANGELOG_HEADER" > "$CHANGELOG_FILE"
        cat "$TEMP_CHANGELOG" >> "$CHANGELOG_FILE"
        cat "$TEMP_FILE" >> "$CHANGELOG_FILE"

        # Clean up temporary files
        rm "$TEMP_CHANGELOG" "$TEMP_FILE"
      shell: bash
