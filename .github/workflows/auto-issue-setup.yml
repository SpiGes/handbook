name: Auto-Setup New Issues

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: write

jobs:
  setup-issue:
    runs-on: ubuntu-latest
    steps:
      - name: Generate GitHub App Token
        id: generate_token
        uses: peter-murray/workflow-application-token-action@v4
        with:
          application_id: ${{ secrets.TECHNICAL_AGENT_APP_ID }}
          application_private_key: ${{ secrets.TECHNICAL_AGENT_APP_PRIVATE_KEY }}

      - name: Assign issue to creator if unassigned
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            const creator = context.payload.issue.user.login;
            const issue = context.payload.issue;

            if (!issue.assignees || issue.assignees.length === 0) {
              console.log(`No assignee found. Assigning issue to ${creator}.`);
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                assignees: [creator]
              });
            } else {
              console.log(`Assignee already exists: ${issue.assignees.map(a => a.login).join(", ")}`);
            }

      - name: Add labels if none exist
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            const existingLabels = context.payload.issue.labels.map(label => label.name);

            if (existingLabels.length === 0) {
              console.log("No labels found. Adding 'new' and 'Type: Task'.");
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number,
                labels: ["new", "Type: Task"]
              });
            } else {
              console.log(`Labels already exist: ${existingLabels.join(", ")}`);
            }

      - name: Set Type field in Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const prId = context.payload.pull_request.node_id;
            const projectName = "SpiGes-Handbuch";
            const typeValue = "Task";

            const projects = await github.graphql(`
              query {
                organization(login: "${context.repo.owner}") {
                  projectsV2(first: 100) {
                    nodes {
                      id
                      title
                    }
                  }
                }
              }
            `);

            const project = projects.organization.projectsV2.nodes.find(p => p.title === projectName);
            if (!project) {
              console.log(`Project V2 "${projectName}" not found.`);
              return;
            }

            const fields = await github.graphql(`
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 100) {
                      nodes {
                        id
                        name
                        dataType
                      }
                    }
                  }
                }
              }
            `, {
              projectId: project.id
            });

            const typeField = fields.node.fields.nodes.find(f => f.name === "Type");
            if (!typeField) {
              console.log(`❌ Field "Type" not found in project.`);
              return;
            }

            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $value }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, {
              projectId: project.id,
              itemId: prId,
              fieldId: typeField.id,
              value: typeValue
            });

            console.log(`Type field set to "${typeValue}" for PR.`);

      # 3. Assigns the milestone "Next" if no one is defined
      - name: Assign milestone if none exists
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue_number = context.payload.issue.number;
            const issue = context.payload.issue;

            if (!issue.milestone) {
              const milestone_title = "Next";
              const milestones = await github.rest.issues.listMilestones({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const milestone = milestones.data.find(m => m.title === milestone_title);

              if (milestone) {
                console.log(`No milestone found. Assigning milestone "${milestone_title}".`);
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue_number,
                  milestone: milestone.number
                });
              } else {
                console.log(`❌ Milestone "${milestone_title}" not found.`);
              }
            } else {
              console.log(`Milestone already exists: ${issue.milestone.title}`);
            }

      # 4. Adds the issue in the project is no one is assigned
      - name: Add issue to project if none exists
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate_token.outputs.token }}
          script: |
            const issue_id = context.payload.issue.node_id;
            const project_name = "SpiGes-Handbuch";

            // Vérification des projets existants pour l'issue
            const projectItems = await github.graphql(`
              query {
                node(id: "${issue_id}") {
                  ... on Issue {
                    projectItems(first: 10) {
                      nodes {
                        project {
                          title
                        }
                      }
                    }
                  }
                }
              }
            `);

            const existingProjects = projectItems.node.projectItems.nodes.map(item => item.project.title);

            if (existingProjects.length === 0) {
              // Ajout au projet seulement si aucun projet n'est déjà assigné
              const projects = await github.graphql(`
                query {
                  organization(login: "${context.repo.owner}") {
                    projectsV2(first: 100) {
                      nodes {
                        id
                        title
                      }
                    }
                  }
                }
              `);

              const project = projects.organization.projectsV2.nodes.find(p => p.title === project_name);

              if (project) {
                console.log(`No project found. Adding issue to project "${project_name}".`);
                await github.graphql(`
                  mutation {
                    addProjectV2ItemById(input: { projectId: "${project.id}", contentId: "${issue_id}" }) {
                      item {
                        id
                      }
                    }
                  }
                `);
              } else {
                console.log(`❌ Project "${project_name}" not found.`);
              }
            } else {
              console.log(`Issue already belongs to project(s): ${existingProjects.join(", ")}`);
            }
